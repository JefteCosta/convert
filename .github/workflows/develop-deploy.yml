name: Deploy to Amazon ECS

on:
  push:
    branches: ['develop']

env:
  AWS_REGION: ${{ vars.MY_AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.MY_ECR_REPOSITORY }}
  ECS_SERVICE: ${{ vars.MY_ECS_SERVICE }}
  ECS_CLUSTER: ${{ vars.MY_ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ vars.MY_ECS_TASK_DEFINITION }}
  CONTAINER_NAME: ${{ vars.MY_CONTAINER_NAME }}
permissions:
  contents: read
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://homo-api.jeftecosta.com.br
    env:
      BASE_URL: ${{ vars.BASE_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: verificando pastas
        run: ls -la
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ./docker/development/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
